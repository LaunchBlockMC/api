---
openapi: 3.1.0
info:
  contact:
    name: LaunchBlock Discord Server
    url: https://discord.gg/LaunchBlock
  title: Public LaunchBlock API
  version: 0.0.1
servers:
- url: https://api.launchblock.gg
  description: "For usage on local development setups, reference this."
- url: http://api-public.launchblock-services.cluster.local
  description: "For usage inside of LaunchBlock containers, reference this."
security:
- Authorization: []
externalDocs:
  description: |
    View the LaunchBlock API documentation, tutorials and more!
  url: https://api.launchblock.gg/docs
components:
  securitySchemes:
    Authorization:
      type: apiKey
      description: |
        This API requires authentication to use! This helps us understand identities, permissions and auditing!

        To generate a Token for local usage, go to your canvas, click into an environment and click Settings -> Tokens -> New Token.

        If you're using this API inside of a container, this is automatically generated in the `LB_API_TOKEN` environment variable.
      name: Authorization
      in: header
  schemas:
    Instant:
      type: string
      format: date-time
      examples:
      - 2022-03-10T16:15:50Z
    LifecycleConfigurationResponseModel:
      type: object
      properties:
        fileDefined:
          type: boolean
          description: If the definition was provided in the github config file (.launchblock/config.json)
        build:
          description: Information about how to build this project
          type:
          - object
          - "null"
          anyOf:
          - $ref: "#/components/schemas/ProjectBuildModel"
          - type: "null"
        deploy:
          description: Information about how to deploy this project
          type:
          - object
          - "null"
          anyOf:
          - $ref: "#/components/schemas/ProjectDeployModel"
          - type: "null"
        restart:
          description: How to handle restarts or failures in this project
          type:
          - object
          - "null"
          anyOf:
          - $ref: "#/components/schemas/ProjectRestartModel"
          - type: "null"
        limits:
          description: Limits to how much resources your project can use
          type:
          - object
          - "null"
          anyOf:
          - $ref: "#/components/schemas/ProjectLimitsModel"
          - type: "null"
        scaling:
          description: Instructions on how to scale your project
          type:
          - object
          - "null"
          anyOf:
          - $ref: "#/components/schemas/ProjectScalingModel"
          - type: "null"
        volumes:
          type:
          - array
          - "null"
          uniqueItems: true
          items:
            $ref: "#/components/schemas/ProjectVolumesModel"
          description: Storage attachments your project needs to persist over containers
        environment:
          type:
          - array
          - "null"
          uniqueItems: true
          items:
            $ref: "#/components/schemas/ProjectEnvironmentModel"
          description: Information about any environment variables this project has
    LifecycleResponseModel:
      type: object
      properties:
        identifier:
          type: string
          description: The identifier of this lifecycle
        commit:
          type:
          - string
          - "null"
          description: A GitHub commit attached to this lifecycle
        image:
          type:
          - string
          - "null"
          description: The docker image generated as part of the build stage
        stateLog:
          type: array
          items:
            $ref: "#/components/schemas/LifecycleStateLogModel"
          description: A log of state changes that have happened to this lifecycle
        state:
          description: The current state of the lifecycle
          type: string
          $ref: "#/components/schemas/LifecycleState"
        stage:
          description: The current stage of the lifecycle
          type: string
          $ref: "#/components/schemas/LifecycleStage"
    LifecycleStage:
      type: string
      enum:
      - QUEUE
      - BUILD
      - DEPLOY
      - FAILED
      - REMOVED
    LifecycleState:
      type: string
      enum:
      - QUEUE
      - BUILDING
      - BUILD_FAILED
      - DEPLOYING
      - DEPLOY_FAILED
      - DEPLOYED
      - ROLLED_BACK
      - REPLACED
    LifecycleStateLogModel:
      type: object
      properties:
        state:
          $ref: "#/components/schemas/LifecycleState"
        timestamp:
          $ref: "#/components/schemas/Instant"
    ModelBuildType:
      type: string
      enum:
      - AUTO
      - DOCKERFILE
      - DOCKER_IMAGE
    ModelRestartType:
      type: string
      enum:
      - ON_FAILURE
    ModelScalingType:
      type: string
      enum:
      - STATIC
      - AUTOSCALE
      - SUMMON
    PermissionModel:
      type: object
      properties:
        identifier:
          type: string
        description:
          type: string
    ProjectBuildModel:
      type: object
      properties:
        builder:
          $ref: "#/components/schemas/ModelBuildType"
        dockerPath:
          type: string
        dockerImage:
          type: string
    ProjectCreateUpdateRequestModel:
      type: object
      properties:
        name:
          type: string
          description: A name for your project
          examples:
          - Discord Bot
          minLength: 3
          maxLength: 50
        iconUrl:
          type:
          - string
          - "null"
          description: The URL of an icon you'd like to give your project
        game:
          type: boolean
          description: If this project is a game (Minecraft) project
          default: false
        iconItemType:
          type:
          - string
          - "null"
          description: "The icon type for your game, shown in the in-game menu"
          default: DIAMOND_SWORD
        githubRepository:
          type:
          - string
          - "null"
          description: The link to the github repository to listen for updates on
          examples:
          - https://github.com/LaunchBlockMC/example-skywars
        githubBranch:
          type:
          - string
          - "null"
          description: The GitHub branch we should listen for changes on
          examples:
          - main
        environmentIdentifier:
          description: The identifier of the environment to create the project in
          type: string
          $ref: "#/components/schemas/UUID"
    ProjectDeployModel:
      type: object
      properties:
        startCommand:
          type: string
    ProjectEnvironmentModel:
      type: object
      properties:
        name:
          type: string
        value:
          type: string
    ProjectLimitsModel:
      type: object
      properties:
        cpu:
          type: integer
          format: int32
        memoryGB:
          type: integer
          format: int32
    ProjectResponseModel:
      type: object
      properties:
        name:
          type: string
          description: A name for your project
          examples:
          - Discord Bot
          minLength: 3
          maxLength: 50
        iconUrl:
          type: string
          description: The URL of an icon you'd like to give your project
        game:
          type: boolean
          description: If this project is a game (Minecraft) project
          default: false
        iconItemType:
          type: string
          description: "The icon type for your game, shown in the in-game menu"
          default: DIAMOND_SWORD
        githubRepository:
          type: string
          description: The link to the github repository to listen for updates on
          examples:
          - https://github.com/LaunchBlockMC/example-skywars
        githubBranch:
          type: string
          description: The GitHub branch we should listen for changes on
          examples:
          - main
        removable:
          type: boolean
          description: If the project can be removed from the environment
          default: true
    ProjectRestartModel:
      type: object
      properties:
        type:
          $ref: "#/components/schemas/ModelRestartType"
        maxTries:
          type: integer
          format: int32
    ProjectScalingModel:
      type: object
      properties:
        type:
          $ref: "#/components/schemas/ModelScalingType"
        amount:
          type: integer
          format: int32
        min:
          type: integer
          format: int32
        max:
          type: integer
          format: int32
        cpuThreshold:
          type: integer
          format: int32
        memoryThreshold:
          type: integer
          format: int32
        minPlayers:
          type: integer
          format: int32
        maxPlayers:
          type: integer
          format: int32
    ProjectVolumesModel:
      type: object
      properties:
        name:
          type: string
        mountPath:
          type: string
        size:
          type: string
          format: |
            \b\d+(?:\.\d+)?\s*(?:B|Ki|Mi|Gi|Ti|Pi|Ei|Zi|Yi)\b
          examples:
          - 10Gi
    UUID:
      type: string
      format: uuid
      pattern: "[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}"
tags:
- name: API Token Management
- name: Environments
- name: Lifecycles
  description: Trigger and get information about builds & deployments for a project
- name: Permissions
- name: Projects
  description: Create and manage projects within an environment
paths:
  /permissions/static:
    get:
      summary: Get a static list of permissions you can add to an API token
      operationId: Permissions.staticList
      tags:
      - Permissions
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                uniqueItems: true
                items:
                  $ref: "#/components/schemas/PermissionModel"
  /projects:
    get:
      summary: Get a list of projects within an environment
      operationId: Projects.list
      tags:
      - Projects
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/ProjectResponseModel"
    post:
      summary: Create a project within an environment
      operationId: Projects.create
      tags:
      - Projects
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ProjectCreateUpdateRequestModel"
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ProjectResponseModel"
  /projects/{identifier}:
    post:
      summary: Update the details about a project within an environment
      operationId: Projects.update
      tags:
      - Projects
      parameters:
      - name: identifier
        in: path
        required: true
        schema:
          $ref: "#/components/schemas/UUID"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ProjectCreateUpdateRequestModel"
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ProjectResponseModel"
    get:
      summary: Get a specified project within an environment
      operationId: Projects.get
      tags:
      - Projects
      parameters:
      - name: identifier
        in: path
        required: true
        schema:
          $ref: "#/components/schemas/UUID"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ProjectResponseModel"
    delete:
      summary: Delete a specified project from an environment
      operationId: Projects.delete
      tags:
      - Projects
      parameters:
      - name: identifier
        in: path
        required: true
        schema:
          $ref: "#/components/schemas/UUID"
      responses:
        "204":
          description: No Content
  /projects/{project_identifier}/lifecycles:
    get:
      summary: Get a list of lifecycles in a project
      operationId: Lifecycle.list
      tags:
      - Lifecycles
      parameters:
      - name: project_identifier
        in: path
        required: true
        schema:
          $ref: "#/components/schemas/UUID"
      - name: limit
        in: query
        schema:
          type: integer
          format: int32
          default: 25
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/LifecycleResponseModel"
  /projects/{project_identifier}/lifecycles/{identifier}:
    delete:
      summary: Rollback a specified lifecycle in a project to the previous successful
        lifecycle
      operationId: Lifecycle.rollback
      tags:
      - Lifecycles
      parameters:
      - name: identifier
        in: path
        required: true
        schema:
          $ref: "#/components/schemas/UUID"
      - name: project_identifier
        in: path
        required: true
        schema:
          $ref: "#/components/schemas/UUID"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/LifecycleResponseModel"
    get:
      summary: Get a specified lifecycle in a project
      operationId: Lifecycle.get
      tags:
      - Lifecycles
      parameters:
      - name: identifier
        in: path
        required: true
        schema:
          $ref: "#/components/schemas/UUID"
      - name: project_identifier
        in: path
        required: true
        schema:
          $ref: "#/components/schemas/UUID"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/LifecycleResponseModel"
  /projects/{project_identifier}/lifecycles/{identifier}/configuration:
    get:
      summary: Get the project configuration attached to a lifecycle
      operationId: Lifecycle.configuration
      tags:
      - Lifecycles
      parameters:
      - name: identifier
        in: path
        required: true
        schema:
          $ref: "#/components/schemas/UUID"
      - name: project_identifier
        in: path
        required: true
        schema:
          $ref: "#/components/schemas/UUID"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/LifecycleConfigurationResponseModel"
